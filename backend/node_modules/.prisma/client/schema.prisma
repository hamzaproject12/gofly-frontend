generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id         Int      @id @default(autoincrement())
  nom        String   @db.VarChar(100)
  email      String?  @unique
  motDePasse String   @db.VarChar(255)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  reservations Reservation[]
  payments     Payment[]
}

model Program {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(150)
  created_at DateTime @default(now()) @map("created_at")

  // Informations administratives
  visaDeadline     DateTime?
  hotelDeadline    DateTime?
  flightDeadline   DateTime?
  passportDeadline DateTime?

  // Informations financières et logistiques
  nbJoursMadina Int   @default(0)
  nbJoursMakkah Int   @default(0)
  exchange      Float @default(1.0) // Taux de change
  prixAvionDH   Float @default(0) // Prix avion en Dirhams
  prixVisaRiyal Float @default(0) // Prix visa en Riyals
  profit        Float @default(0) // Marge bénéficiaire

  // Relations
  expenses     Expense[]
  hotelsMadina ProgramHotelMadina[]
  hotelsMakkah ProgramHotelMakkah[]
  rooms        Room[]
  reservations Reservation[]
}

model Hotel {
  id             Int                  @id @default(autoincrement())
  name           String               @db.VarChar(150)
  city           City
  programsMadina ProgramHotelMadina[]
  programsMakkah ProgramHotelMakkah[]
  rooms          Room[]

  @@unique([name, city])
}

model ProgramHotelMadina {
  id        Int     @id @default(autoincrement())
  programId Int
  hotelId   Int
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([programId, hotelId])
}

model ProgramHotelMakkah {
  id        Int     @id @default(autoincrement())
  programId Int
  hotelId   Int
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([programId, hotelId])
}

model Room {
  id                  Int      @id @default(autoincrement())
  programId           Int
  hotelId             Int
  roomType            RoomType
  gender              String // Genre des clients (Homme/Femme)
  nbrPlaceTotal       Int // Nombre total de places
  nbrPlaceRestantes   Int // Nombre de places restantes
  prixRoom            Float // Prix de la chambre pour le séjour
  listeIdsReservation Int[] // Liste des IDs de réservation
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")

  // Relations
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  hotel   Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Reservation {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  phone           String
  programId       Int
  roomType        RoomType
  gender          String    @default("Homme") // Genre des clients (Homme/Femme)
  hotelMadina     String?
  hotelMakkah     String?
  price           Float
  reduction       Float     @default(0) // Réduction appliquée au prix
  paidAmount      Float     @default(0)
  status          String    @default("Incomplet") @db.VarChar(50)
  statutPasseport Boolean   @default(false)
  statutVisa      Boolean   @default(false)
  statutHotel     Boolean   @default(false)
  statutVol       Boolean   @default(false)
  reservationDate DateTime
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")
  expenses        Expense[]
  documents       Fichier[]
  payments        Payment[]
  program         Program   @relation(fields: [programId], references: [id])
  agent           Agent?    @relation(fields: [agentId], references: [id])
  agentId         Int? // Agent qui a créé la réservation
}

model Fichier {
  id            Int         @id @default(autoincrement())
  reservationId Int
  fileName      String
  storedName    String
  fileType      String
  fileCategory  String
  filePath      String
  uploaded_at   DateTime    @default(now()) @map("uploaded_at")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  payment       Payment?
}

model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int
  agentId       Int // Clé étrangère obligatoire vers Agent
  amount        Float
  paymentMethod String
  paymentDate   DateTime    @default(now())
  fichierId     Int?        @unique
  fichier       Fichier?    @relation(fields: [fichierId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  agent         Agent       @relation(fields: [agentId], references: [id], onDelete: Restrict)
  programId     Int?
}

model Expense {
  id            Int          @id @default(autoincrement())
  description   String
  amount        Float
  date          DateTime     @default(now())
  type          String
  fichierId     Int?
  programId     Int?
  reservationId Int?
  program       Program?     @relation(fields: [programId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  QUAD
  QUINT
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum City {
  Madina
  Makkah
}

enum Role {
  USER
  ADMIN
}
