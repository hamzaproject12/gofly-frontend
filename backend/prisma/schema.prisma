generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(AGENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Agent {
  id           Int           @id @default(autoincrement())
  nom          String        @db.VarChar(100)
  email        String?       @unique
  motDePasse   String        @db.VarChar(255)
  role         Role          @default(AGENT)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  payments     Payment[]
  reservations Reservation[]
}

model Program {
  id               Int                  @id @default(autoincrement())
  name             String               @db.VarChar(150)
  created_at       DateTime             @default(now()) @map("created_at")
  visaDeadline     DateTime?
  hotelDeadline    DateTime?
  flightDeadline   DateTime?
  passportDeadline DateTime?
  exchange         Float                @default(1.0)
  nbJoursMadina    Int                  @default(0)
  nbJoursMakkah    Int                  @default(0)
  prixAvionDH      Float                @default(0)
  prixVisaRiyal    Float                @default(0)
  profit           Float                @default(0)
  expenses         Expense[]
  hotelsMadina     ProgramHotelMadina[]
  hotelsMakkah     ProgramHotelMakkah[]
  reservations     Reservation[]
  rooms            Room[]
}

model Hotel {
  id             Int                  @id @default(autoincrement())
  name           String               @db.VarChar(150)
  city           City
  programsMadina ProgramHotelMadina[]
  programsMakkah ProgramHotelMakkah[]
  rooms          Room[]

  @@unique([name, city])
}

model ProgramHotelMadina {
  id        Int     @id @default(autoincrement())
  programId Int
  hotelId   Int
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, hotelId])
}

model ProgramHotelMakkah {
  id        Int     @id @default(autoincrement())
  programId Int
  hotelId   Int
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, hotelId])
}

model Room {
  id                  Int      @id @default(autoincrement())
  programId           Int
  hotelId             Int
  roomType            RoomType
  gender              String
  nbrPlaceTotal       Int
  nbrPlaceRestantes   Int
  prixRoom            Float
  listeIdsReservation Int[]
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")
  hotel               Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  program             Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model Reservation {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  phone           String
  programId       Int
  roomType        RoomType
  hotelMadina     String?
  hotelMakkah     String?
  price           Float
  paidAmount      Float     @default(0)
  status          String    @default("Incomplet") @db.VarChar(50)
  statutPasseport Boolean   @default(false)
  statutVisa      Boolean   @default(false)
  statutHotel     Boolean   @default(false)
  statutVol       Boolean   @default(false)
  reservationDate DateTime
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")
  gender          String    @default("Homme")
  agentId         Int?
  reduction       Float     @default(0)
  expenses        Expense[]
  documents       Fichier[]
  payments        Payment[]
  agent           Agent?    @relation(fields: [agentId], references: [id])
  program         Program   @relation(fields: [programId], references: [id])
}

model Fichier {
  id            Int         @id @default(autoincrement())
  reservationId Int
  fileType      String
  fileName      String
  storedName    String
  filePath      String      // Chemin local (pour compatibilit√©)
  cloudinaryId  String?     // ID Cloudinary (nouveau)
  cloudinaryUrl String?     // URL Cloudinary (nouveau)
  uploaded_at   DateTime    @default(now()) @map("uploaded_at")
  fileCategory  String
  expenses      Expense[]
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  payment       Payment?
}

model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int
  amount        Float
  paymentMethod String
  paymentDate   DateTime    @default(now())
  fichierId     Int?        @unique
  programId     Int?
  agentId       Int?
  agent         Agent?      @relation(fields: [agentId], references: [id], onDelete: Restrict)
  fichier       Fichier?    @relation(fields: [fichierId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model Expense {
  id            Int          @id @default(autoincrement())
  description   String
  amount        Float
  date          DateTime     @default(now())
  programId     Int?
  type          String
  fichierId     Int?
  reservationId Int?
  fichier       Fichier?     @relation(fields: [fichierId], references: [id])
  program       Program?     @relation(fields: [programId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  QUAD
  QUINT
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum City {
  Madina
  Makkah
}
